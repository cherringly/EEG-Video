import numpy as np
from datetime import datetime

def fn_BionodeBinOpen(packedFileDir, ADCres, sampR):
    """
    fn_BionodeBinOpen.py

    Created by: Alessandro Ascani Orsini

    Date: 11/09/2024

    Version: 0.0.2

    *Description*: This function opens a bin file generated by the Bionode, given the ADC resolution, sampling rate,
    header size, and outputs a dict containing all the data in the bin.
    """

    # Unpack the rawdata
    try:
        with open(packedFileDir, 'rb') as file:
            rawData = np.frombuffer(file.read(), dtype=np.uint8)
    except FileNotFoundError:
        raise FileNotFoundError('File could not be opened. Check the path or permissions.')

    # Read Timestamp Header (10 bytes) + Remaining Header Bytes
    year = (rawData[0] << 8) + rawData[1]
    month = rawData[2]
    day = rawData[3]
    hour = rawData[4]
    minute = rawData[5]
    second = rawData[6]
    sampleRate = (rawData[7] << 8) + rawData[8]
    numChannels = rawData[9]

    # Store the timestamp as a datetime in the struct
    unpackedFile = {}
    unpackedFile['Date'] = datetime(year, month, day, hour, minute, second)
    unpackedFile['sampleRate'] = sampleRate
    unpackedFile['numChannels'] = numChannels

    # Data Packets
    packetSize = 58
    packetNum = len(rawData) // packetSize

    # Initialize channel buffers and write indices
    maxSamplesEstimate = 26 * packetNum // numChannels
    channelsData = np.zeros((numChannels, maxSamplesEstimate), dtype=np.uint16)
    write_idx = np.zeros(numChannels, int)

    print("Unpacking Data from file...")

    for i in range(1, packetNum):
        tempPacket = rawData[(packetSize * i):(packetSize * (i + 1))]
        X = tempPacket[7:-11]
        yarr = np.zeros(len(X) // 3, dtype=np.uint32)

        for j in range(len(yarr)):
            yarr[j] = (X[3 * j] << 16) | (X[3 * j + 1] << 8) | X[3 * j + 2]

        zarr = np.zeros(2 * len(yarr), dtype=np.uint16)
        for j in range(len(yarr)):
            mask = 0xFFF000
            for k in range(2):
                zarr[2 * j + k] = (yarr[j] & mask) >> (12 * (1 - k))
                mask >>= 12

        for idx in range(len(zarr)):
            channel = idx % numChannels
            if write_idx[channel] < channelsData.shape[1]:
                channelsData[channel, write_idx[channel]] = zarr[idx]
                write_idx[channel] += 1
            else:
                print(f"Warning: Channel {channel} overflow. Ignoring extra data.")
                break

        if i % round(packetNum * 0.05) == 0:
            print(f'Progress: {round((i / packetNum) * 100)}%')

    print("Unpacking Completed!")

    # Trim channel data arrays based on how many samples were actually written
    minSamples = np.min(write_idx)
    channelsData = channelsData[:, :minSamples]

    unpackedFile['channelsData'] = channelsData
    unpackedFile['time'] = np.arange(0, channelsData.shape[1]) / sampR

    return unpackedFile


def main():
    # Input parameters
    packedFileDir = "ear3.31.25_1.bin"
    ADCres = 24       # ADC resolution (e.g., 24 bits)
    sampR = 1000      # Sampling rate in Hz (update as needed)

    # Load and unpack data
    unpacked = fn_BionodeBinOpen(packedFileDir, ADCres, sampR)

    print("\n--- File Info ---")
    print("Date:", unpacked["Date"])
    print("Sample Rate:", unpacked["sampleRate"])
    print("Channels:", unpacked["numChannels"])
    print("Shape:", unpacked["channelsData"].shape)

    # Optional: Plot a quick preview
    import matplotlib.pyplot as plt
    plt.plot(unpacked["time"], unpacked["channelsData"][0])
    plt.title("Channel 0 Preview")
    plt.xlabel("Time (s)")
    plt.ylabel("Amplitude")
    plt.show()


if __name__ == "__main__":
    main()
